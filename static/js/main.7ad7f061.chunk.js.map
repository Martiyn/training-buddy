{"version":3,"sources":["components/Form.js","components/Filter.js","components/Exercise.js","App.js","index.js"],"names":["FormControl","props","useState","name","setName","onSubmit","e","preventDefault","trim","addExercise","className","htmlFor","type","id","autoComplete","value","onChange","target","FilterButton","aria-pressed","isPressed","onClick","setFilter","Exercise","isEditing","setEditing","newName","setNewName","editFieldRef","useRef","editButtonRef","wasEditing","ref","useEffect","current","usePrevious","editingTemplate","editExercise","viewTemplate","defaultChecked","completed","toggleExerciseCompleted","deleteExercise","focus","FILTER_MAP","All","Active","exercise","Completed","FILTER_NAMES","Object","keys","Trainer","exercises","setExercises","filter","updatedExercises","map","remainingExercises","editedExerciseList","exerciseList","filterList","Filter","exercisesNoun","length","headingText","listHeadingRef","prevExerciseLength","Form","newExercise","nanoid","tabIndex","role","aria-labelledby","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ad7f061.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction FormControl(props) {\r\n  const [name, setName] = useState('');\r\n\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    if (!name.trim()) {\r\n      return;\r\n    }\r\n    props.addExercise(name);\r\n    setName(\"\");\r\n  }\r\n\r\n\r\n  function handleChange(e) {\r\n    setName(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <h2 className=\"label-wrapper\">\r\n        <label htmlFor=\"new-exercise-input\" className=\"label__lg\">\r\n          What exercise needs to be done?\r\n        </label>\r\n      </h2>\r\n\r\n      <input\r\n        type=\"text\"\r\n        id=\"new-exercise-input\"\r\n        className=\"input input__lg\"\r\n        name=\"text\"\r\n        autoComplete=\"off\"\r\n        value={name}\r\n        onChange={handleChange}\r\n      />\r\n      <button type=\"submit\" className=\"btn btn__primary btn__lg\">\r\n        Add exercise\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default FormControl;","import React from \"react\";\r\n\r\nfunction FilterButton(props) {\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className=\"btn toggle-btn\"\r\n      aria-pressed={props.isPressed}\r\n      onClick={() => props.setFilter(props.name)}\r\n    >\r\n      <span className=\"visually-hidden\">Show </span>\r\n      <span>{props.name}</span>\r\n      <span className=\"visually-hidden\"> exercises</span>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default FilterButton;","import React, { useEffect, useRef, useState } from \"react\";\r\n\r\n\r\nfunction usePrevious(value) {\r\n    const ref = useRef();\r\n    useEffect(() => {\r\n        ref.current = value;\r\n    });\r\n    return ref.current;\r\n}\r\n\r\nexport default function Exercise(props) {\r\n    const [isEditing, setEditing] = useState(false);\r\n    const [newName, setNewName] = useState('');\r\n    \r\n    const editFieldRef = useRef(null);\r\n    const editButtonRef = useRef(null);\r\n    const wasEditing = usePrevious(isEditing);\r\n\r\n    function handleChange(e) {\r\n       setNewName(e.target.value)\r\n        }\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        if(!newName.trim()) {\r\n            return;\r\n        }\r\n\r\n        props.editExercise(props.id, newName);\r\n        setNewName(\"\");\r\n        setEditing(false);\r\n    }\r\n\r\n    const editingTemplate = (\r\n        <form className=\"stack-small\" onSubmit={handleSubmit}>\r\n         <div className=\"form-group\">\r\n             <label className=\"exercise-label\" htmlFor={props.id}>\r\n                 New name for {props.name}\r\n             </label>\r\n             <input\r\n             id={props.id}\r\n             className=\"exercise-text\"\r\n             type=\"text\"\r\n             value={newName || props.name}\r\n             onChange={handleChange}\r\n             ref={editFieldRef}\r\n             />\r\n         </div>\r\n         <div className=\"btn-group\">\r\n             <button\r\n             type=\"button\"\r\n             className=\"btn exercise-cancel\"\r\n             onClick={() => setEditing(false)}\r\n             >\r\n                 Cancel\r\n                 <span className=\"visually-hidden\">renaming {props.name}</span>\r\n             </button>\r\n             <button \r\n             type=\"submit\"\r\n             className=\"btn btn__primary exercise-edit\"\r\n             >\r\n                 Save\r\n                 <span className=\"visually-hidden\">new name for {props.name}</span>\r\n             </button>\r\n         </div>\r\n        </form>\r\n    );\r\n\r\n    const viewTemplate = (\r\n        <div className=\"stack-small\">\r\n            <div className=\"c-cb\">\r\n                <input\r\n                id={props.id}\r\n                type=\"checkbox\"\r\n                defaultChecked={props.completed}\r\n                onChange={() => props.toggleExerciseCompleted(props.id)}\r\n                />\r\n                <label className=\"exercise-label\" htmlFor={props.id}>\r\n                    {props.name}\r\n                </label>\r\n            </div>\r\n            <div className=\"btn-group\">\r\n                <button\r\n                type=\"button\"\r\n                className=\"btn\"\r\n                onClick={() => setEditing(true)}\r\n                ref={editButtonRef}\r\n                >\r\n                    Edit\r\n                    <span className=\"visually-hidden\">{props.name}</span>\r\n                </button>\r\n                <button\r\n                type=\"button\"\r\n                className=\"btn btn__danger\"\r\n                onClick={() => props.deleteExercise(props.id)}\r\n                >\r\n                    Delete\r\n                    <span className=\"visually-hidden\">{props.name}</span>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    useEffect(() => {\r\n        if(!wasEditing && isEditing) {\r\n            editFieldRef.current.focus();\r\n        }\r\n        if(wasEditing && !isEditing) {\r\n            editButtonRef.current.focus();\r\n        }\r\n    }, [wasEditing, isEditing]);\r\n\r\n    return <li className=\"exercise\">{isEditing ? editingTemplate : viewTemplate}</li>;\r\n}","import React, { useState, useRef, useEffect } from \"react\";\r\nimport FormControl from \"./components/Form.js\";\r\nimport FilterButton from \"./components/Filter.js\";\r\nimport Exercise from \"./components/Exercise.js\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nfunction usePrevious(value) {\r\n    const ref = useRef();\r\n    useEffect(() => {\r\n      ref.current = value;\r\n    });\r\n    return ref.current;\r\n  }\r\n  \r\n  const FILTER_MAP = {\r\n    All: () => true,\r\n    Active: exercise => !exercise.completed,\r\n    Completed: exercise => exercise.completed\r\n  };\r\n  \r\n  const FILTER_NAMES = Object.keys(FILTER_MAP);\r\n  \r\n  function Trainer(props) {\r\n    const [exercises, setExercises] = useState(props.exercises);\r\n    const [filter, setFilter] = useState('All');\r\n  \r\n    function toggleExerciseCompleted(id) {\r\n      const updatedExercises = exercises.map(exercise => {\r\n        if (id === exercise.id) {\r\n          return {...exercise, completed: !exercise.completed}\r\n        }\r\n        return exercise;\r\n      });\r\n      setExercises(updatedExercises);\r\n    }\r\n  \r\n    function deleteExercise(id) {\r\n      const remainingExercises = exercises.filter(exercise => id !== exercise.id);\r\n      setExercises(remainingExercises);\r\n    }\r\n  \r\n    function editExercise(id, newName) {\r\n      const editedExerciseList = exercises.map(exercise => {\r\n        if (id === exercise.id) {\r\n          return {...exercise, name: newName}\r\n        }\r\n        return exercise;\r\n      });\r\n      setExercises(editedExerciseList);\r\n    }\r\n  \r\n    const exerciseList = exercises\r\n    .filter(FILTER_MAP[filter])\r\n    .map(exercise => (\r\n      <Exercise\r\n        id={exercise.id}\r\n        name={exercise.name}\r\n        completed={exercise.completed}\r\n        key={exercise.id}\r\n        toggleExerciseCompleted={toggleExerciseCompleted}\r\n        deleteExercise={deleteExercise}\r\n        editExercise={editExercise}\r\n      />\r\n    ));\r\n  \r\n    const filterList = FILTER_NAMES\r\n    .map(name => (\r\n      <FilterButton\r\n        key={name}\r\n        name={name}\r\n        isPressed={name === filter}\r\n        setFilter={setFilter}\r\n      />\r\n    ));\r\n  \r\n    function addExercise(name) {\r\n      const newExercise = { id: \"exercise-\" + nanoid(), name: name, completed: false };\r\n      setExercises([...exercises, newExercise]);\r\n    }\r\n  \r\n  \r\n    const exercisesNoun = exerciseList.length !== 1 ? 'exercises' : 'exercise';\r\n    const headingText = `${exerciseList.length} ${exercisesNoun} remaining`;\r\n  \r\n    const listHeadingRef = useRef(null);\r\n    const prevExerciseLength = usePrevious(exercises.length);\r\n  \r\n    useEffect(() => {\r\n      if (exercises.length - prevExerciseLength === -1) {\r\n        listHeadingRef.current.focus();\r\n      }\r\n    }, [exercises.length, prevExerciseLength]);\r\n  \r\n    return (\r\n      <div className=\"exerciseapp stack-large\">\r\n        <FormControl addExercise={addExercise} />\r\n        <div className=\"filters btn-group stack-exception\">\r\n          {filterList}\r\n        </div>\r\n        <h2 id=\"list-heading\" tabIndex=\"-1\" ref={listHeadingRef}>\r\n          {headingText}\r\n        </h2>\r\n        <ul\r\n          role=\"list\"\r\n          className=\"exercise-list stack-large stack-exception\"\r\n          aria-labelledby=\"list-heading\"\r\n        >\r\n          {exerciseList}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default Trainer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Trainer from './App.js'\n\n\nconst TRAIN = [\n  {id: \"exercise-0\", name: \"Pull ups (10)\", completed: false},\n  {id: \"exercise-1\", name: \"Bench press (5)\", completed: false},\n  {id: \"exercise-2\", name: \"Bicep curls (12)\", completed: false}\n]\n\nReactDOM.render(\n  <React.StrictMode>\n    <Trainer exercises={TRAIN} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}